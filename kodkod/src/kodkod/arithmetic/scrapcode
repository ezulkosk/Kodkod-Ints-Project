public void copyOldFormulas(Formula[]formulas)
	{
		oldFormulas = new Formula[formulas.length];
		for(int i =0; i < formulas.length; i++)
		{
			oldFormulas[i] = formulas[i];
		}
		
	}
	
	//System.out.println(equalsNodes);
		//Instance in = sol.instance();
		//Set<Relation> s = sol.instance().relations();
	/*	for(Relation r: s)
		{
			if(r.toString().contains("this") && ! dontTouch.contains(r.toString())){
				TupleSet lower = factory.noneOf(in.tuples(r).arity());
				//lower.add(factory.tuple(tupleArray[0].toString()).product(factory.tuple(tupleArray[1].toString())));
				//System.out.println(tupleArray.toString());
				lower.addAll(in.tuples(r));
				//System.out.println(lower);
				//System.out.println(r + " " + in.tuples(r).arity());
				if(in.tuples(r).arity() == 2){
				//bounds.bound(relations[0], lower,lower);//TODO FIX ME
				//bounds.bound(x7, lower,lower);
				//bounds.bound(x9, lower,lower);
				
				}
			}
		}*/

		//Recompute.recompute(equalsNodes, sol.instance().relations());

		//System.out.println(dontTouch);
		
		/*formula=Formula.compose(FormulaOperator.AND, oldFormulas);
		solver = new Solver();
		solver.options().setSolver(SATFactory.DefaultSAT4J);
		solver.options().setBitwidth(4);
		solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
		solver.options().setSymmetryBreaking(20);
		solver.options().setSkolemDepth(0);
		System.out.println("Solving...");
		System.out.flush();
		sol = solver.solve(formula,bounds);
		System.out.println(sol.toString());*/
/*
		Collection c= new ArrayList(Arrays.asList(s)); 
		ArrayList<String> list = new ArrayList<String>(c);
		list.add("19");
		universe = new Universe(list);
		Instance inst = new Instance(universe);*/
		//for(Relation r: s)
		//{
			//System.out.println(r + " " + in.tuples(r));
//			inst.add(r, in.tuples(r));
		//}

		//Solution test = new Solution(sol.outcome(), sol.stats(), inst, sol.proof());

		//System.out.println("B" + in.toString());
		//System.out.println("A" + test.toString());

/*for(int i = 0; i < formulas.length; i++)
		{
			Formula f = formulas[i];
			if(f.intToSMT != 1)
				continue;
			else
			{
				callByType(f,false);
				System.out.println("\nOutput:");
				//String[] varsArray = (String[]) vars.toArray();
				//for(int j = 0; j < varsArray.length; j++){
				//	System.out.println(varsArray[j]);
				//}
				Iterator itr = vars.iterator();
				while(itr.hasNext()){
					System.out.println(itr.next());
				}
				System.out.println(output);	
			}
			
		}
		*/
		checkforints(binaryformula)
		/*if(f.left().intToSMT == 1 && f.right().intToSMT == 1)
			f.intToSMT = 1;
		else
			f.intToSMT = 0;*/
//		System.out.println("binary" + f.op());


package kodkod.smt;

import java.util.HashSet;
import java.util.Iterator;

import kodkod.ast.BinaryExpression;
import kodkod.ast.BinaryFormula;
import kodkod.ast.BinaryIntExpression;
import kodkod.ast.ComparisonFormula;
import kodkod.ast.Comprehension;
import kodkod.ast.ConstantExpression;
import kodkod.ast.ConstantFormula;
import kodkod.ast.Decl;
import kodkod.ast.Decls;
import kodkod.ast.ExprToIntCast;
import kodkod.ast.Formula;
import kodkod.ast.IfExpression;
import kodkod.ast.IfIntExpression;
import kodkod.ast.IntComparisonFormula;
import kodkod.ast.IntConstant;
import kodkod.ast.IntToExprCast;
import kodkod.ast.MultiplicityFormula;
import kodkod.ast.NaryExpression;
import kodkod.ast.NaryFormula;
import kodkod.ast.NaryIntExpression;
import kodkod.ast.NotFormula;
import kodkod.ast.ProjectExpression;
import kodkod.ast.QuantifiedFormula;
import kodkod.ast.Relation;
import kodkod.ast.RelationPredicate;
import kodkod.ast.SumExpression;
import kodkod.ast.UnaryExpression;
import kodkod.ast.UnaryIntExpression;
import kodkod.ast.Variable;
import kodkod.ast.operator.ExprCastOperator;
import kodkod.ast.operator.ExprCompOperator;

public final class Preprocess implements SMTVisitor {

	static int depth = 0;
	static int bitwidth = 32;
	String output = "";
	HashSet<String> vars = new HashSet<String>();
	
	public void smtPreProcess(Formula...formulas)
	{
		
		
		for(int i = 0; i < formulas.length; i++)
		{
			Formula f = formulas[i];
			//System.out.println(f);
			depth = 0;
			callByType(f,true);
			//System.out.println();
		}
		for(int i = 0; i < formulas.length; i++)
		{
			Formula f = formulas[i];
			if(f.intToSMT != 1)
				continue;
			else
			{
				callByType(f,false);
				System.out.println("\nOutput:");
				//String[] varsArray = (String[]) vars.toArray();
				//for(int j = 0; j < varsArray.length; j++){
				//	System.out.println(varsArray[j]);
				//}
				Iterator itr = vars.iterator();
				while(itr.hasNext()){
					System.out.println(itr.next());
				}
				System.out.println(output);
				
			}
			
		}
	}
	
	public void checkForInts(BinaryFormula f)
	{
	
		//System.out.println();
		callByType(f.left(),true);
		callByType(f.right(),true);
		if(f.left().intToSMT == 1 && f.right().intToSMT == 1)
			f.intToSMT = 1;
		else
			f.intToSMT = 0;
//		System.out.println("binary" + f.op());
		
		
	}
	public  void checkForInts(ComparisonFormula f)
	{
		callByType(f.left(),true);
		callByType(f.right(),true);
		if(f.op() == ExprCompOperator.EQUALS && (f.left().intToSMT == 1 || f.right().intToSMT == 1))
			f.intToSMT = 1;
		else
			f.intToSMT = 0;
	//	System.out.println("comparison" + f);
		
		

	}
	public  void checkForInts(ConstantFormula f)
	{
		f.intToSMT = 0;
//		System.out.println("constant");
		
		

	}
	public  void checkForInts(MultiplicityFormula f)
	{
//		System.out.println("multiplicity");
		
		

	}
	public  void checkForInts(IntComparisonFormula f)
	{
//		System.out.println("intcomparison"  + f);
		callByType(f.left(),true);
		callByType(f.right(),true);
		f.intToSMT = 1;
		

	}
	public  void checkForInts(QuantifiedFormula f)
	{
//		System.out.println("quantified");
		//f.decls();
		callByType(f.formula(),true);
		if(f.formula().intToSMT == 1)
			f.intToSMT = 1;
		else
			f.intToSMT = 0;
		

	}
	public  void checkForInts(NaryFormula f)
	{
//		System.out.println("nary");
		

		

	}
	public  void checkForInts(NotFormula f)
	{
//		System.out.println("not");
		
		

	}
	
	@Override
	public void checkForInts(Decls decls) {
		
		
	}

	@Override
	public void checkForInts(Decl decl) {
		
		
	}

	@Override
	public void checkForInts(Relation relation) {
		//System.out.println(relation.name());
		
	}

	@Override
	public void checkForInts(Variable variable) {
		
		
	}

	@Override
	public void checkForInts(ConstantExpression constExpr) {
		
		
	}

	@Override
	public void checkForInts(UnaryExpression unaryExpr) {
		
		
	}

	@Override
	public void checkForInts(BinaryExpression binExpr) {
		callByType(binExpr.left(),true);
		callByType(binExpr.right(),true);
		
	}

	@Override
	public void checkForInts(NaryExpression expr) {
		expr.intToSMT = 0;
	}

	@Override
	public void checkForInts(Comprehension comprehension) {
		
	}

	@Override
	public void checkForInts(IfExpression ifExpr) {
		
	}

	@Override
	public void checkForInts(ProjectExpression project) {
		
	}

	@Override
	public void checkForInts(IntToExprCast castExpr) {
		callByType(castExpr.intExpr(),true);
		castExpr.intToSMT = 1;
	}

	@Override
	public void checkForInts(IntConstant intConst) {
		intConst.intToSMT = 1;
		//System.out.println(intConst.value());
	}

	@Override
	public void checkForInts(IfIntExpression intExpr) {
		
		
	}

	@Override
	public void checkForInts(ExprToIntCast intExpr) {
		
		if(intExpr.op() == ExprCastOperator.SUM){
			callByType(intExpr.expression(),true);
			intExpr.intToSMT = 1;
		}
		else
			intExpr.intToSMT = 0;
	}

	@Override
	public void checkForInts(NaryIntExpression intExpr) {
		
		
	}

	@Override
	public void checkForInts(BinaryIntExpression intExpr) {
		/*System.out.println("(" + intExpr.op());
		
		System.out.println(")");
		*/
		callByType(intExpr.left(),true);
		callByType(intExpr.right(),true);
		intExpr.intToSMT = 1;
		
	}

	@Override
	public void checkForInts(UnaryIntExpression intExpr) {
		
	}

	@Override
	public void checkForInts(SumExpression intExpr) {
		
	}

	

	@Override
	public void checkForInts(RelationPredicate predicate) {
		
	}
	
	public void callByType(Object f, boolean preProcess)
	{
		depth++;
		//System.out.println(depth);
		if(preProcess){
			if(f instanceof BinaryFormula)
				checkForInts(( BinaryFormula) f);
			else if(f instanceof ComparisonFormula)
				checkForInts(( ComparisonFormula) f);
			else if(f instanceof ConstantFormula)
				checkForInts(( ConstantFormula) f);
			else if(f instanceof MultiplicityFormula)
				checkForInts(( MultiplicityFormula) f);
			else if(f instanceof IntComparisonFormula)
				checkForInts(( IntComparisonFormula) f);
			else if(f instanceof QuantifiedFormula)
				checkForInts(( QuantifiedFormula) f);
			else if(f instanceof NaryFormula)
				checkForInts(( NaryFormula) f);
			else if(f instanceof NotFormula)
				checkForInts(( NotFormula) f);
			else if(f instanceof BinaryExpression)
				checkForInts((BinaryExpression) f);
			else if(f instanceof Relation)
				checkForInts((Relation) f);
			else if(f instanceof ConstantExpression)
				checkForInts((ConstantExpression) f);
			else if(f instanceof Variable)
				checkForInts((Variable) f);
			else if(f instanceof ExprToIntCast)
				checkForInts((ExprToIntCast) f);
			else if(f instanceof IntToExprCast)
				checkForInts((IntToExprCast) f);
			else if(f instanceof IntConstant)
				checkForInts((IntConstant) f);
			else if(f instanceof BinaryIntExpression)
				checkForInts((BinaryIntExpression) f);
			else
				System.out.println("ERROR" + f);
		}
		else{
			System.out.println("IN " + f);
			if(f instanceof BinaryFormula)
				processInts(( BinaryFormula) f);
			else if(f instanceof ComparisonFormula)
				processInts(( ComparisonFormula) f);
			else if(f instanceof ConstantFormula)
				processInts(( ConstantFormula) f);
			else if(f instanceof MultiplicityFormula)
				processInts(( MultiplicityFormula) f);
			else if(f instanceof IntComparisonFormula)
				processInts(( IntComparisonFormula) f);
			else if(f instanceof QuantifiedFormula)
				processInts(( QuantifiedFormula) f);
			else if(f instanceof NaryFormula)
				processInts(( NaryFormula) f);
			else if(f instanceof NotFormula)
				processInts(( NotFormula) f);
			else if(f instanceof BinaryExpression)
				processInts((BinaryExpression) f);
			else if(f instanceof Relation)
				processInts((Relation) f);
			else if(f instanceof ConstantExpression)
				processInts((ConstantExpression) f);
			else if(f instanceof Variable)
				processInts((Variable) f);
			else if(f instanceof ExprToIntCast)
				processInts((ExprToIntCast) f);
			else if(f instanceof IntToExprCast)
				processInts((IntToExprCast) f);
			else if(f instanceof IntConstant)
				processInts((IntConstant) f);
			else if(f instanceof BinaryIntExpression)
				processInts((BinaryIntExpression) f);
			else if(f instanceof Decl)
				processInts((Decl) f);
			else
				System.out.println("ERROR" + f);
		}
		depth--;
	}

	@Override
	public void processInts(Decls decls) {
		System.out.println(decls.size());
		
	}

	@Override
	public void processInts(Decl decl) {
		// TODO Auto-generated method stub
		//System.out.println("F "+ decl.expression());
		//output = decl.expression() + "\n" +  output;
		vars.add(decl.expression().toString());
	//	System.out.println(decl)
		
	}

	@Override
	public void processInts(Relation relation) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(Variable variable) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(ConstantExpression constExpr) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(UnaryExpression unaryExpr) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(BinaryExpression binExpr) {
		output += binExpr.right()+ " ";
		
	}

	@Override
	public void processInts(NaryExpression expr) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(Comprehension comprehension) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(IfExpression ifExpr) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(ProjectExpression project) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(IntToExprCast castExpr) {
		switch(castExpr.op()){
		case BITSETCAST:
			break;
		case INTCAST:
			System.out.println("FFFF" + castExpr.intExpr());
			callByType(castExpr.intExpr(),false);
			break;
		default:
			break;
		
		}
		
	}

	@Override
	public void processInts(IntConstant intConst) {
		output += "(_ bv"+intConst.value() + " " + bitwidth + ") ";
		
	}

	@Override
	public void processInts(IfIntExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(ExprToIntCast intExpr) {
		//output = ((BinaryExpression)intExpr.expression()).right() + "\n" + output;
		output += ((BinaryExpression)intExpr.expression()).right()+ " " ;
		vars.add(((BinaryExpression)intExpr.expression()).right().toString());
	}

	@Override
	public void processInts(NaryIntExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(BinaryIntExpression intExpr) {
		switch(intExpr.op()){
		case ABS:
			break;
		case AND:
			break;
		case DIVIDE:
			break;
		case MINUS:
			break;
		case MODULO:
			break;
		case MULTIPLY:
			output += "(bvmul ";
			
			break;
		case NEG:
			break;
		case NOT:
			break;
		case OR:
			break;
		case PLUS:
			output += "(bvadd ";
			break;
		case SGN:
			break;
		case SHA:
			break;
		case SHL:
			break;
		case SHR:
			break;
		case XOR:
			break;
		default:
			break;
		
		}
		callByType(intExpr.left(),false);
		callByType(intExpr.right(),false);
		output+=")";
		
	}

	@Override
	public void processInts(UnaryIntExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(SumExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(IntComparisonFormula intComp) {
		switch(intComp.op()){
		case EQ:
			output += "(= ";
			break;
		case GT:
			output += "(bvsgt ";
			break;
		case GTE:
			output += "(bvsge ";
			break;
		case LT:
			output += "(bvslt ";
			break;
		case LTE:
			output += "(bvsle ";
			break;
		default:
			break;
		}
		callByType(intComp.left(), false);
		callByType(intComp.right(), false);
		output += ")";
		
	}

	@Override
	public void processInts(QuantifiedFormula quantFormula) {
		callByType(quantFormula.decls(), false);
		callByType(quantFormula.formula(), false);
		
		
	}

	@Override
	public void processInts(NaryFormula formula) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(BinaryFormula binFormula) {
		if(binFormula.intToSMT == 1)
		{
			switch(binFormula.op()){
			case AND:
				output += "(and ";
				break;
			case OR:
				output += "(or ";
			case IFF:
				break;
			case IMPLIES:
				break;
			}
			callByType(binFormula.left(), false);
			callByType(binFormula.right(), false);
			output += ")";
		}
		
	}

	@Override
	public void processInts(NotFormula not) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(ConstantFormula constant) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(ComparisonFormula compFormula) {
		switch(compFormula.op())
		{
		case EQUALS:
			if(compFormula.intToSMT == 1){
				output += "(= ";
				callByType(compFormula.left(), false);
				callByType(compFormula.right(), false);
				output += ")";
			}
			break;
		case SUBSET:
			break;
		default:
			break;
		}
		
	}

	@Override
	public void processInts(MultiplicityFormula multFormula) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void processInts(RelationPredicate predicate) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(Decls decls) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(Decl decl) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(Relation relation) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(Variable variable) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(ConstantExpression constExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(UnaryExpression unaryExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(BinaryExpression binExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(NaryExpression expr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(Comprehension comprehension) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(IfExpression ifExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(ProjectExpression project) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(IntToExprCast castExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(IntConstant intConst) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(IfIntExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(ExprToIntCast intExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(NaryIntExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(BinaryIntExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(UnaryIntExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(SumExpression intExpr) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(IntComparisonFormula intComp) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(QuantifiedFormula quantFormula) {
		// TODO Auto-generated method stub
		
		
	}

	
	public void buildTree(NaryFormula formula) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(BinaryFormula binFormula) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(NotFormula not) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(ConstantFormula constant) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(ComparisonFormula compFormula) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(MultiplicityFormula multFormula) {
		// TODO Auto-generated method stub
		
	}

	
	public void buildTree(RelationPredicate predicate) {
		// TODO Auto-generated method stub
		
	}


	

	
	
}


package kodkod.smt;

import kodkod.ast.BinaryExpression;
import kodkod.ast.BinaryFormula;
import kodkod.ast.BinaryIntExpression;
import kodkod.ast.ComparisonFormula;
import kodkod.ast.Comprehension;
import kodkod.ast.ConstantExpression;
import kodkod.ast.ConstantFormula;
import kodkod.ast.Decl;
import kodkod.ast.Decls;
import kodkod.ast.ExprToIntCast;
import kodkod.ast.IfExpression;
import kodkod.ast.IfIntExpression;
import kodkod.ast.IntComparisonFormula;
import kodkod.ast.IntConstant;
import kodkod.ast.IntToExprCast;
import kodkod.ast.MultiplicityFormula;
import kodkod.ast.NaryExpression;
import kodkod.ast.NaryFormula;
import kodkod.ast.NaryIntExpression;
import kodkod.ast.NotFormula;
import kodkod.ast.ProjectExpression;
import kodkod.ast.QuantifiedFormula;
import kodkod.ast.Relation;
import kodkod.ast.RelationPredicate;
import kodkod.ast.SumExpression;
import kodkod.ast.UnaryExpression;
import kodkod.ast.UnaryIntExpression;
import kodkod.ast.Variable;

public interface SMTVisitor {
	
    public void checkForInts(Decls decls);
    
    public void checkForInts(Decl decl);
    
    public void checkForInts(Relation relation);
    
    public void checkForInts(Variable variable);
    
    public void checkForInts(ConstantExpression constExpr);
    
    public void checkForInts(UnaryExpression unaryExpr);   
    
    public void checkForInts(BinaryExpression binExpr);
    
    public void checkForInts(NaryExpression expr);
    
    public void checkForInts(Comprehension comprehension);
    
    public void checkForInts(IfExpression ifExpr); 
    
    public void checkForInts(ProjectExpression project);
    
    public void checkForInts(IntToExprCast castExpr);
    
    public void checkForInts(IntConstant intConst);
    
    public void checkForInts(IfIntExpression intExpr);
    
    public void checkForInts(ExprToIntCast intExpr);
    
    public void checkForInts(NaryIntExpression intExpr);
    
    public void checkForInts(BinaryIntExpression intExpr);
    
    public void checkForInts(UnaryIntExpression intExpr);
    
    public void checkForInts(SumExpression intExpr);
    
    public void checkForInts(IntComparisonFormula intComp);
    
    public void checkForInts(QuantifiedFormula quantFormula);
   
    public void checkForInts(NaryFormula formula);
  
    public void checkForInts(BinaryFormula binFormula);
  
    public void checkForInts(NotFormula not);
  
    public void checkForInts(ConstantFormula constant);
    
    public void checkForInts(ComparisonFormula compFormula);
   
    public void checkForInts(MultiplicityFormula multFormula);
   
    public void checkForInts(RelationPredicate predicate);


    public void processInts(Decls decls);
    
    public void processInts(Decl decl);
    
    public void processInts(Relation relation);
    
    public void processInts(Variable variable);
    
    public void processInts(ConstantExpression constExpr);
    
    public void processInts(UnaryExpression unaryExpr);   
    
    public void processInts(BinaryExpression binExpr);
    
    public void processInts(NaryExpression expr);
    
    public void processInts(Comprehension comprehension);
    
    public void processInts(IfExpression ifExpr); 
    
    public void processInts(ProjectExpression project);
    
    public void processInts(IntToExprCast castExpr);
    
    public void processInts(IntConstant intConst);
    
    public void processInts(IfIntExpression intExpr);
    
    public void processInts(ExprToIntCast intExpr);
    
    public void processInts(NaryIntExpression intExpr);
    
    public void processInts(BinaryIntExpression intExpr);
    
    public void processInts(UnaryIntExpression intExpr);
    
    public void processInts(SumExpression intExpr);
    
    public void processInts(IntComparisonFormula intComp);
    
    public void processInts(QuantifiedFormula quantFormula);
   
    public void processInts(NaryFormula formula);
  
    public void processInts(BinaryFormula binFormula);
  
    public void processInts(NotFormula not);
  
    public void processInts(ConstantFormula constant);
    
    public void processInts(ComparisonFormula compFormula);
   
    public void processInts(MultiplicityFormula multFormula);
   
    public void processInts(RelationPredicate predicate);
    
    /*
public void buildTree(Decls decls);
    
    public void buildTree(Decl decl);
    
    public void buildTree(Relation relation);
    
    public void buildTree(Variable variable);
    
    public void buildTree(ConstantExpression constExpr);
    
    public void buildTree(UnaryExpression unaryExpr);   
    
    public void buildTree(BinaryExpression binExpr);
    
    public void buildTree(NaryExpression expr);
    
    public void buildTree(Comprehension comprehension);
    
    public void buildTree(IfExpression ifExpr); 
    
    public void buildTree(ProjectExpression project);
    
    public void buildTree(IntToExprCast castExpr);
    
    public void buildTree(IntConstant intConst);
    
    public void buildTree(IfIntExpression intExpr);
    
    public void buildTree(ExprToIntCast intExpr);
    
    public void buildTree(NaryIntExpression intExpr);
    
    public void buildTree(BinaryIntExpression intExpr);
    
    public void buildTree(UnaryIntExpression intExpr);
    
    public void buildTree(SumExpression intExpr);
    
    public void buildTree(IntComparisonFormula intComp);
    
    public void buildTree(QuantifiedFormula quantFormula);
   
    public void buildTree(NaryFormula formula);
  
    public void buildTree(BinaryFormula binFormula);
  
    public void buildTree(NotFormula not);
  
    public void buildTree(ConstantFormula constant);
    
    public void buildTree(ComparisonFormula compFormula);
   
    public void buildTree(MultiplicityFormula multFormula);
   
    public void buildTree(RelationPredicate predicate);
*/

}
